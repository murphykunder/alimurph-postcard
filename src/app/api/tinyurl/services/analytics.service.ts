/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { generalAnalytics } from '../fn/analytics/general-analytics';
import { GeneralAnalytics$Params } from '../fn/analytics/general-analytics';
import { GeneralAnalyticsResponse } from '../models/general-analytics-response';
import { hoursPopularityAnalytics } from '../fn/analytics/hours-popularity-analytics';
import { HoursPopularityAnalytics$Params } from '../fn/analytics/hours-popularity-analytics';
import { HoursPopularityAnalyticsResponse } from '../models/hours-popularity-analytics-response';
import { locationAnalytics } from '../fn/analytics/location-analytics';
import { LocationAnalytics$Params } from '../fn/analytics/location-analytics';
import { LocationAnalyticsResponse } from '../models/location-analytics-response';
import { rawLogsAnalytics } from '../fn/analytics/raw-logs-analytics';
import { RawLogsAnalytics$Params } from '../fn/analytics/raw-logs-analytics';
import { RawLogsAnalyticsResponse } from '../models/raw-logs-analytics-response';
import { timelineAnalytics } from '../fn/analytics/timeline-analytics';
import { TimelineAnalytics$Params } from '../fn/analytics/timeline-analytics';
import { TimelineAnalyticsResponse } from '../models/timeline-analytics-response';
import { topLanguagesAnalytics } from '../fn/analytics/top-languages-analytics';
import { TopLanguagesAnalytics$Params } from '../fn/analytics/top-languages-analytics';
import { TopLanguagesAnalyticsResponse } from '../models/top-languages-analytics-response';
import { topSourcesAnalytics } from '../fn/analytics/top-sources-analytics';
import { TopSourcesAnalytics$Params } from '../fn/analytics/top-sources-analytics';
import { TopSourcesAnalyticsResponse } from '../models/top-sources-analytics-response';
import { weekdaysPopularityAnalytics } from '../fn/analytics/weekdays-popularity-analytics';
import { WeekdaysPopularityAnalytics$Params } from '../fn/analytics/weekdays-popularity-analytics';
import { WeekdaysPopularityAnalyticsResponse } from '../models/weekdays-popularity-analytics-response';

@Injectable({ providedIn: 'root' })
export class AnalyticsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rawLogsAnalytics()` */
  static readonly RawLogsAnalyticsPath = '/analytics/raw/json';

  /**
   * Return raw analytics logs.
   *
   * Return raw analytics logs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rawLogsAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  rawLogsAnalytics$Response(params: RawLogsAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<RawLogsAnalyticsResponse>> {
    return rawLogsAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return raw analytics logs.
   *
   * Return raw analytics logs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rawLogsAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rawLogsAnalytics(params: RawLogsAnalytics$Params, context?: HttpContext): Observable<RawLogsAnalyticsResponse> {
    return this.rawLogsAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<RawLogsAnalyticsResponse>): RawLogsAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `timelineAnalytics()` */
  static readonly TimelineAnalyticsPath = '/analytics/timeline';

  /**
   * Return timeline analytics.
   *
   * Return timeline analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `timelineAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  timelineAnalytics$Response(params: TimelineAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<TimelineAnalyticsResponse>> {
    return timelineAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return timeline analytics.
   *
   * Return timeline analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `timelineAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  timelineAnalytics(params: TimelineAnalytics$Params, context?: HttpContext): Observable<TimelineAnalyticsResponse> {
    return this.timelineAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<TimelineAnalyticsResponse>): TimelineAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `generalAnalytics()` */
  static readonly GeneralAnalyticsPath = '/analytics/general';

  /**
   * Return browser, os and device analytics.
   *
   * Return browser, os and device analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `generalAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  generalAnalytics$Response(params: GeneralAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<GeneralAnalyticsResponse>> {
    return generalAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return browser, os and device analytics.
   *
   * Return browser, os and device analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `generalAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  generalAnalytics(params: GeneralAnalytics$Params, context?: HttpContext): Observable<GeneralAnalyticsResponse> {
    return this.generalAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<GeneralAnalyticsResponse>): GeneralAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `weekdaysPopularityAnalytics()` */
  static readonly WeekdaysPopularityAnalyticsPath = '/analytics/popularity/weekday';

  /**
   * Return week days popularity analytics.
   *
   * Return week days popularity analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `weekdaysPopularityAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  weekdaysPopularityAnalytics$Response(params: WeekdaysPopularityAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<WeekdaysPopularityAnalyticsResponse>> {
    return weekdaysPopularityAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return week days popularity analytics.
   *
   * Return week days popularity analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `weekdaysPopularityAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  weekdaysPopularityAnalytics(params: WeekdaysPopularityAnalytics$Params, context?: HttpContext): Observable<WeekdaysPopularityAnalyticsResponse> {
    return this.weekdaysPopularityAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<WeekdaysPopularityAnalyticsResponse>): WeekdaysPopularityAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `hoursPopularityAnalytics()` */
  static readonly HoursPopularityAnalyticsPath = '/analytics/popularity/hour';

  /**
   * Return hour popularity analytics.
   *
   * Return hour popularity analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hoursPopularityAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  hoursPopularityAnalytics$Response(params: HoursPopularityAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<HoursPopularityAnalyticsResponse>> {
    return hoursPopularityAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return hour popularity analytics.
   *
   * Return hour popularity analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hoursPopularityAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hoursPopularityAnalytics(params: HoursPopularityAnalytics$Params, context?: HttpContext): Observable<HoursPopularityAnalyticsResponse> {
    return this.hoursPopularityAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<HoursPopularityAnalyticsResponse>): HoursPopularityAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `topSourcesAnalytics()` */
  static readonly TopSourcesAnalyticsPath = '/analytics/sources/top';

  /**
   * Return top sources analytics.
   *
   * Return top sources analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `topSourcesAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  topSourcesAnalytics$Response(params: TopSourcesAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<TopSourcesAnalyticsResponse>> {
    return topSourcesAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return top sources analytics.
   *
   * Return top sources analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `topSourcesAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  topSourcesAnalytics(params: TopSourcesAnalytics$Params, context?: HttpContext): Observable<TopSourcesAnalyticsResponse> {
    return this.topSourcesAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<TopSourcesAnalyticsResponse>): TopSourcesAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `topLanguagesAnalytics()` */
  static readonly TopLanguagesAnalyticsPath = '/analytics/languages/top';

  /**
   * Return top languages analytics.
   *
   * Return top languages analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `topLanguagesAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  topLanguagesAnalytics$Response(params: TopLanguagesAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<TopLanguagesAnalyticsResponse>> {
    return topLanguagesAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return top languages analytics.
   *
   * Return top languages analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `topLanguagesAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  topLanguagesAnalytics(params: TopLanguagesAnalytics$Params, context?: HttpContext): Observable<TopLanguagesAnalyticsResponse> {
    return this.topLanguagesAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<TopLanguagesAnalyticsResponse>): TopLanguagesAnalyticsResponse => r.body)
    );
  }

  /** Path part for operation `locationAnalytics()` */
  static readonly LocationAnalyticsPath = '/analytics/location/{region}';

  /**
   * Return location analytics.
   *
   * Return locations analytics
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `locationAnalytics()` instead.
   *
   * This method doesn't expect any request body.
   */
  locationAnalytics$Response(params: LocationAnalytics$Params, context?: HttpContext): Observable<StrictHttpResponse<LocationAnalyticsResponse>> {
    return locationAnalytics(this.http, this.rootUrl, params, context);
  }

  /**
   * Return location analytics.
   *
   * Return locations analytics
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `locationAnalytics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  locationAnalytics(params: LocationAnalytics$Params, context?: HttpContext): Observable<LocationAnalyticsResponse> {
    return this.locationAnalytics$Response(params, context).pipe(
      map((r: StrictHttpResponse<LocationAnalyticsResponse>): LocationAnalyticsResponse => r.body)
    );
  }

}
