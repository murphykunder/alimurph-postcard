/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AliasesCountResponse } from '../models/aliases-count-response';
import { AliasResponse } from '../models/alias-response';
import { analyticsSharingTinyUrl } from '../fn/tiny-url/analytics-sharing-tiny-url';
import { AnalyticsSharingTinyUrl$Params } from '../fn/tiny-url/analytics-sharing-tiny-url';
import { analyticsStatusTinyUrl } from '../fn/tiny-url/analytics-status-tiny-url';
import { AnalyticsStatusTinyUrl$Params } from '../fn/tiny-url/analytics-status-tiny-url';
import { archiveTinyUrl } from '../fn/tiny-url/archive-tiny-url';
import { ArchiveTinyUrl$Params } from '../fn/tiny-url/archive-tiny-url';
import { changeTinyUrl } from '../fn/tiny-url/change-tiny-url';
import { ChangeTinyUrl$Params } from '../fn/tiny-url/change-tiny-url';
import { createTinyUrl } from '../fn/tiny-url/create-tiny-url';
import { CreateTinyUrl$Params } from '../fn/tiny-url/create-tiny-url';
import { deleteTinyUrl } from '../fn/tiny-url/delete-tiny-url';
import { DeleteTinyUrl$Params } from '../fn/tiny-url/delete-tiny-url';
import { getTinyUrl } from '../fn/tiny-url/get-tiny-url';
import { GetTinyUrl$Params } from '../fn/tiny-url/get-tiny-url';
import { getTinyUrlsCount } from '../fn/tiny-url/get-tiny-urls-count';
import { GetTinyUrlsCount$Params } from '../fn/tiny-url/get-tiny-urls-count';
import { getTinyUrlsList } from '../fn/tiny-url/get-tiny-urls-list';
import { GetTinyUrlsList$Params } from '../fn/tiny-url/get-tiny-urls-list';
import { updateTinyUrl } from '../fn/tiny-url/update-tiny-url';
import { UpdateTinyUrl$Params } from '../fn/tiny-url/update-tiny-url';
import { UrlAliasHitsBillableResponse } from '../models/url-alias-hits-billable-response';
import { UrlAliasResponse } from '../models/url-alias-response';
import { UrlResponse } from '../models/url-response';


/**
 * TinyURLs are short links that redirect to a longer link. These API endpoints allow you to shorten new links & modify how they function
 */
@Injectable({ providedIn: 'root' })
export class TinyUrlService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTinyUrl()` */
  static readonly CreateTinyUrlPath = '/create';

  /**
   * Create a new TinyURL.
   *
   * Take a long URL and shorten it into a new TinyURL.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTinyUrl$Response(params: CreateTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlAliasResponse>> {
    return createTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new TinyURL.
   *
   * Take a long URL and shorten it into a new TinyURL.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTinyUrl(params: CreateTinyUrl$Params, context?: HttpContext): Observable<UrlAliasResponse> {
    return this.createTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlAliasResponse>): UrlAliasResponse => r.body)
    );
  }

  /** Path part for operation `updateTinyUrl()` */
  static readonly UpdateTinyUrlPath = '/update';

  /**
   * Update TinyURLs alias, tags, stats options.
   *
   * Endpoint allows to update TinyURL alias, tags, stats settings
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTinyUrl$Response(params: UpdateTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasResponse>> {
    return updateTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Update TinyURLs alias, tags, stats options.
   *
   * Endpoint allows to update TinyURL alias, tags, stats settings
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTinyUrl(params: UpdateTinyUrl$Params, context?: HttpContext): Observable<AliasResponse> {
    return this.updateTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasResponse>): AliasResponse => r.body)
    );
  }

  /** Path part for operation `changeTinyUrl()` */
  static readonly ChangeTinyUrlPath = '/change';

  /**
   * Update TinyURLs long URL.
   *
   * Endpoint allows to update TinyURL long URL
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeTinyUrl$Response(params: ChangeTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlResponse>> {
    return changeTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Update TinyURLs long URL.
   *
   * Endpoint allows to update TinyURL long URL
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeTinyUrl(params: ChangeTinyUrl$Params, context?: HttpContext): Observable<UrlResponse> {
    return this.changeTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlResponse>): UrlResponse => r.body)
    );
  }

  /** Path part for operation `getTinyUrl()` */
  static readonly GetTinyUrlPath = '/alias/{domain}/{alias}';

  /**
   * Receive TinyURL information.
   *
   * Endpoint allows to receive TinyURL information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTinyUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrl$Response(params: GetTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlAliasHitsBillableResponse>> {
    return getTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Receive TinyURL information.
   *
   * Endpoint allows to receive TinyURL information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTinyUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrl(params: GetTinyUrl$Params, context?: HttpContext): Observable<UrlAliasHitsBillableResponse> {
    return this.getTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlAliasHitsBillableResponse>): UrlAliasHitsBillableResponse => r.body)
    );
  }

  /** Path part for operation `deleteTinyUrl()` */
  static readonly DeleteTinyUrlPath = '/alias/{domain}/{alias}';

  /**
   * Delete TinyURL.
   *
   * Endpoint allows to delete TinyURL
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTinyUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTinyUrl$Response(params: DeleteTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlAliasResponse>> {
    return deleteTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete TinyURL.
   *
   * Endpoint allows to delete TinyURL
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTinyUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTinyUrl(params: DeleteTinyUrl$Params, context?: HttpContext): Observable<UrlAliasResponse> {
    return this.deleteTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlAliasResponse>): UrlAliasResponse => r.body)
    );
  }

  /** Path part for operation `getTinyUrlsList()` */
  static readonly GetTinyUrlsListPath = '/urls/{type}';

  /**
   * Get a list of TinyURLs.
   *
   * Endpoint allows to get a list of TinyURLs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTinyUrlsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrlsList$Response(params: GetTinyUrlsList$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasResponse>> {
    return getTinyUrlsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a list of TinyURLs.
   *
   * Endpoint allows to get a list of TinyURLs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTinyUrlsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrlsList(params: GetTinyUrlsList$Params, context?: HttpContext): Observable<AliasResponse> {
    return this.getTinyUrlsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasResponse>): AliasResponse => r.body)
    );
  }

  /** Path part for operation `getTinyUrlsCount()` */
  static readonly GetTinyUrlsCountPath = '/urls/{type}/count';

  /**
   * Get count of TinyURLs.
   *
   * Endpoint allows to get a count of TinyURLs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTinyUrlsCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrlsCount$Response(params: GetTinyUrlsCount$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasesCountResponse>> {
    return getTinyUrlsCount(this.http, this.rootUrl, params, context);
  }

  /**
   * Get count of TinyURLs.
   *
   * Endpoint allows to get a count of TinyURLs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTinyUrlsCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTinyUrlsCount(params: GetTinyUrlsCount$Params, context?: HttpContext): Observable<AliasesCountResponse> {
    return this.getTinyUrlsCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasesCountResponse>): AliasesCountResponse => r.body)
    );
  }

  /** Path part for operation `archiveTinyUrl()` */
  static readonly ArchiveTinyUrlPath = '/archive';

  /**
   * Archive/unarchive TinyURL.
   *
   * Endpoint allows to archive/unarchive TinyURL
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `archiveTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  archiveTinyUrl$Response(params: ArchiveTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasResponse>> {
    return archiveTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive/unarchive TinyURL.
   *
   * Endpoint allows to archive/unarchive TinyURL
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `archiveTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  archiveTinyUrl(params: ArchiveTinyUrl$Params, context?: HttpContext): Observable<AliasResponse> {
    return this.archiveTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasResponse>): AliasResponse => r.body)
    );
  }

  /** Path part for operation `analyticsStatusTinyUrl()` */
  static readonly AnalyticsStatusTinyUrlPath = '/analytics/status';

  /**
   * Enable/disable TinyURL analytics collecting.
   *
   * Endpoint allows to manage TinyURL analytics collecting
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `analyticsStatusTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyticsStatusTinyUrl$Response(params: AnalyticsStatusTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasResponse>> {
    return analyticsStatusTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Enable/disable TinyURL analytics collecting.
   *
   * Endpoint allows to manage TinyURL analytics collecting
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `analyticsStatusTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyticsStatusTinyUrl(params: AnalyticsStatusTinyUrl$Params, context?: HttpContext): Observable<AliasResponse> {
    return this.analyticsStatusTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasResponse>): AliasResponse => r.body)
    );
  }

  /** Path part for operation `analyticsSharingTinyUrl()` */
  static readonly AnalyticsSharingTinyUrlPath = '/analytics/sharing';

  /**
   * Enable/disable TinyURL analytics sharing.
   *
   * Endpoint allows to manage TinyURL analytics sharing
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `analyticsSharingTinyUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyticsSharingTinyUrl$Response(params: AnalyticsSharingTinyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<AliasResponse>> {
    return analyticsSharingTinyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Enable/disable TinyURL analytics sharing.
   *
   * Endpoint allows to manage TinyURL analytics sharing
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `analyticsSharingTinyUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyticsSharingTinyUrl(params: AnalyticsSharingTinyUrl$Params, context?: HttpContext): Observable<AliasResponse> {
    return this.analyticsSharingTinyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<AliasResponse>): AliasResponse => r.body)
    );
  }

}
