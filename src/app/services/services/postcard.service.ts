/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createCard } from '../fn/postcard/create-card';
import { CreateCard$Params } from '../fn/postcard/create-card';
import { export$ } from '../fn/postcard/export';
import { Export$Params } from '../fn/postcard/export';
import { getStatus } from '../fn/postcard/get-status';
import { GetStatus$Params } from '../fn/postcard/get-status';
import { Postcard } from '../models/postcard';
import { PostcardCreateResponse } from '../models/postcard-create-response';
import { viewCard } from '../fn/postcard/view-card';
import { ViewCard$Params } from '../fn/postcard/view-card';

@Injectable({ providedIn: 'root' })
export class PostcardService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createCard()` */
  static readonly CreateCardPath = '/postcard/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCard()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCard$Response(params: CreateCard$Params, context?: HttpContext): Observable<StrictHttpResponse<PostcardCreateResponse>> {
    return createCard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCard$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCard(params: CreateCard$Params, context?: HttpContext): Observable<PostcardCreateResponse> {
    return this.createCard$Response(params, context).pipe(
      map((r: StrictHttpResponse<PostcardCreateResponse>): PostcardCreateResponse => r.body)
    );
  }

  /** Path part for operation `viewCard()` */
  static readonly ViewCardPath = '/postcard/view';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `viewCard()` instead.
   *
   * This method doesn't expect any request body.
   */
  viewCard$Response(params: ViewCard$Params, context?: HttpContext): Observable<StrictHttpResponse<Postcard>> {
    return viewCard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `viewCard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  viewCard(params: ViewCard$Params, context?: HttpContext): Observable<Postcard> {
    return this.viewCard$Response(params, context).pipe(
      map((r: StrictHttpResponse<Postcard>): Postcard => r.body)
    );
  }

  /** Path part for operation `getStatus()` */
  static readonly GetStatusPath = '/postcard/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStatus$Response(params?: GetStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStatus(params?: GetStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.getStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `export()` */
  static readonly ExportPath = '/postcard/export';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `export()` instead.
   *
   * This method doesn't expect any request body.
   */
  export$Response(params: Export$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return export$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `export$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  export(params: Export$Params, context?: HttpContext): Observable<{
}> {
    return this.export$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
